/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T>
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data)
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.*;

public class Solution 
{
    private static TreeNode<Integer> build(ArrayList<Integer> preorder,int prestart,int preend,ArrayList<Integer> inorder,int instart,int inend,HashMap<Integer,Integer> h){
        if(prestart>preend||instart>inend)
        {
            return null;
        }
        int inroot=h.get(preorder.get(prestart));
        int inleft=inroot-instart;
        
        TreeNode<Integer> root=new TreeNode(preorder.get(prestart));
        
        root.left=build(preorder,prestart+1,prestart+inleft,inorder,instart,inroot-1,h);
        root.right=build(preorder,prestart+inleft+1,preend,inorder,inroot+1,inend,h);
        return root;
        
    }
    public static TreeNode<Integer> buildBinaryTree(ArrayList<Integer>  inorder, ArrayList<Integer>  preorder) 
    {
        //    Write your code here.
        HashMap<Integer,Integer> h=new HashMap<>();
        for(int i=0;i<inorder.size();i++){
            h.put(inorder.get(i),i);
        }
   TreeNode<Integer> node=build(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,h);
        return node; 
    }
}