import java.util.*;

public class Solution {
    public static int findMin(int[] nums) {
        int n=nums.length;
     int start=0,end=n-1;
         if(nums[start]<=nums[end])
             return start;
        while(start<=end){
            int mid=start+(end-start)/2;
            int next=(mid+1)%n;
            int prev=(mid+n-1)%n;
            
            if(nums[mid]<=nums[prev]&&nums[mid]<=nums[next])
            {
                
                return mid;
            }
            else if(nums[mid]<=nums[end]){
                   end=mid-1;
               }
                else if(nums[start]<=nums[mid])
                {
                    start=mid+1;
                }  
            }
        return 0;
        
    }
 private static int binarysearch(int arr[],int l,int h,int key){
     while(l<=h){
         int mid=l+(h-l)/2;
         if(arr[mid]==key)
         {
             return mid;
         }
         else if(arr[mid]>key){
             h=mid-1;
         }
         else if(arr[mid]<key){
             l=mid+1;  
         }
         
     }
     return -1;
 }   
    public static int search(int arr[], int key) {
        // Write your code here.
        int n=arr.length;
        if(n==0||arr==null)
            return -1;
        int start=0,end=n-1;
       int min_ind=findMin(arr);
        int half1=binarysearch(arr,start,min_ind-1,key);
        int half2=binarysearch(arr,min_ind,end,key);
        if(half1==-1&&half2==-1)
        {
            return -1;
        }
        else if(half1!=-1)
            return half1;
        return half2;
        
    }
}