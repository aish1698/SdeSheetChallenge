public class Solution {
    private static int helper(int l,int pieces[],int price[],int n,int dp[][]){
        if(n==0||l==0)
            return 0;
        if(dp[l][n]!=-1)
            return dp[l][n];
        else if(pieces[l-1]>n){
            return dp[l][n]=helper(l-1,pieces,price,n,dp);
            
        }
        int take=price[l-1]+helper(l,pieces,price,n-pieces[l-1],dp);
        int nottake=helper(l-1,pieces,price,n,dp);
        return dp[l][n]=Math.max(take,nottake);
        
    }
	public static int cutRod(int price[], int n) {
		// Write your code here.
       
        int l=1;
        int pieces[]=new int[n];
        for(int i=0;i<n;i++){
            pieces[i]=l++;
            
        }
         int dp[][]=new int[pieces.length+1][n+1];
        for(int i=0;i<=pieces.length;i++){
            for(int j=0;j<=n;j++){
                dp[i][j]=-1;
            }
        }
        
        return helper(pieces.length,pieces,price,n,dp);
	}
}