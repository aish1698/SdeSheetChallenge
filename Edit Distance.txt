
public class Solution {
private static int helper(String str2,String str1,int s,int t,int dp[][]){
    if(t<0)
        return s+1;
    if(s<0)
        return t+1;
    if(dp[s][t]!=-1)
        return dp[s][t];
    if(str2.charAt(s)==str1.charAt(t))
        return dp[s][t]=0+helper(str2,str1,s-1,t-1,dp);
    
    int delete=1+helper(str2,str1,s-1,t,dp);
    int add=1+helper(str2,str1,s,t-1,dp);
    int replace=1+helper(str2,str1,s-1,t-1,dp);
    return dp[s][t]=Math.min(delete,Math.min(add,replace));
}
    public static int editDistance(String str1, String str2) {
        //Your code goes here
        int len_target=str1.length();
        int len_source=str2.length();
        int dp[][]=new int[len_source][len_target];
        for(int i=0;i<len_source;i++){
            for(int j=0;j<len_target;j++){
                dp[i][j]=-1;
                
            }
        }
        return helper(str2,str1,len_source-1,len_target-1,dp);
    }
}