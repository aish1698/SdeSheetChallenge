import java.util.*;
public class Solution {
    private static PriorityQueue<Integer> minheap;
    private static PriorityQueue<Integer> maxheap;
    private static int ans[];
    private static int k;
    private static void add_num(int num){
        if(maxheap.isEmpty()||maxheap.peek()>=num)
        {
            maxheap.offer(num);
        }
        else{
            minheap.offer(num);
        }
        if(maxheap.size()<minheap.size()){
            maxheap.offer(minheap.poll());
            
        }
        else if(maxheap.size()>minheap.size()+1)
        {
            minheap.offer(maxheap.poll());
        }
        findmid();
        
        
    } 
    private static void findmid(){
        if(minheap.size()==maxheap.size())
        {
            int mid=(maxheap.peek()+minheap.peek())/2;
            ans[k++]=mid;
        }
        else{
            ans[k++]=maxheap.peek();
        }
        
    } 
    public static int[] findMedian(int[] arr, int n) {
        // Write your code here.
        ans=new int[n];
        k=0;
        minheap=new PriorityQueue<>();
        maxheap=new PriorityQueue<>((a,b)->b-a);
        for(int i=0;i<arr.length;i++)
        add_num(arr[i]);
        return ans;
    }
}
