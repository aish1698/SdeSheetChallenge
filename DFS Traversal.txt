import java.util.*;

public class Solution {
    private static ArrayList<ArrayList<Integer>> ans;
    private static void dfs(ArrayList<ArrayList<Integer>> adj,boolean vis[],int node,ArrayList<Integer> l){
        
        
        vis[node]=true;
        l.add(node);
        for(int ver:adj.get(node)){
            if(!vis[ver])
            {
                dfs(adj,vis,ver,l);
            }
            
            
        }
        
    }
    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {
        // Write your code here.
        ans=new ArrayList<>();
  ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<v;i++){
            adj.add(i,new ArrayList());
            
        }
     for(int i=0;i<edges.size();i++){
            
      adj.get(edges.get(i).get(0)).add(edges.get(i).get(1));
          adj.get(edges.get(i).get(1)).add(edges.get(i).get(0));
              
        }
        boolean vis[]=new boolean[v];
        for(int i=0;i<v;i++){
            if(!vis[i])
            {
                ArrayList<Integer> l=new ArrayList<>();
                dfs(adj,vis,i,l);
                ans.add(l);
                
            }
            
            
        }
        return ans;
    }
}