import java.util.*;

public class Solution {
    private static void currentstate(ArrayList<ArrayList<Integer>> ans,int arr[][],int n){
        ArrayList<Integer> temp=new ArrayList<>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                temp.add(arr[i][j]);
                
            }
        }
        ans.add(temp);
        
    }
    private static boolean isbound(int maze[][],int i,int j,int n){
        if(i<0||j<0||i>=n||j>=n||maze[i][j]==0)
            return false;
        return true;
    }
    private static void dfs(int maze[][],int n,int i,int j,int dir[][],int arr[][],ArrayList<ArrayList<Integer>> ans){
        if(i==n-1&&j==n-1)
        {
        
            currentstate(ans,arr,n);
            return;
        }
        
        
        for(int d[]:dir){
            int x=d[0]+i;
            int y=d[1]+j;
            if(isbound(maze,x,y,n)&&maze[x][y]==1&&arr[x][y]==0){
            
                arr[x][y]=1;
                dfs(maze,n,x,y,dir,arr,ans);
                arr[x][y]=0;
                
            
            } 
        }
        
    }
    public static ArrayList<ArrayList<Integer>> ratInAMaze(int[][] maze, int n) {
        // Write your code here.
        int dir[][]={{1,0},{-1,0},{0,1},{0,-1}};
        int arr[][]=new int[n][n];
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
      
        if(maze[0][0]==0)
            return new ArrayList();
       arr[0][0]=1;
       dfs(maze,n,0,0,dir,arr,ans);
        
        return ans;
        
    }
}