import java.util.*;

public class Solution {
private static boolean isbipartite(ArrayList<ArrayList<Integer>> adj,ArrayList<Integer> color,int v){
    Queue<Integer> q=new LinkedList<>();
    q.offer(v);
    color.set(v,1);
    while(!q.isEmpty())
    {
        int size=q.size();
        for(int i=0;i<size;i++){
            int node=q.poll();
            for(int ver:adj.get(node)){
                if(color.get(ver)==-1)
                {
                    color.set(ver,1-color.get(node));
                    q.offer(ver);
                    
                }
                else{
                    if(color.get(node)==color.get(ver))
                    {
                        return false;
                    }
                }
                
            }
            
        }
        
        
    }
    return true;

        
} 
    public static boolean isGraphBirpatite(ArrayList<ArrayList<Integer>> edges) {

        // Write your code here
        int n=edges.size();
        ArrayList<ArrayList<Integer>> adj=new ArrayList<ArrayList<Integer>>(n);
        for(int i=0;i<n;i++){
            adj.add(i,new ArrayList<Integer>());
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(edges.get(i).get(j)==1)
                {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }  
        }
        ArrayList<Integer> color=new ArrayList<>(n);
        for(int i=0;i<n;i++)
        {
            color.add(i,-1);
        }
       
        for(int i=0;i<n;i++){
            if(color.get(i)==-1)
            {
                if(!isbipartite(adj,color,i))
                    return false;
            }
            
        }
        return true;
        
    }
}
