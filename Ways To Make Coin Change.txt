Recursion

public class Solution {
    private static long helper(int n,int v,int denominations[]){
        if(v==0)
            return 1;
        if(v<0)
            return 0;
        
        if(n==0&&v>0)
            return 0;
        long take=helper(n,v-denominations[n-1],denominations);
        long nottake=helper(n-1,v,denominations);
        return take+nottake;
        
        
    }

	public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here	
        int n=denominations.length;
        
return helper(n,value,denominations);
	}
	
}

Memoization


public class Solution {
    private static long helper(int n,int v,int denominations[],long dp[][]){
        if(v==0)
            return 1;
        if(v<0)
            return 0;
        
        if(n==0&&v>0)
            return 0;
        if(dp[n][v]!=-1)
            return dp[n][v];
        
        long take=helper(n,v-denominations[n-1],denominations,dp);
        long nottake=helper(n-1,v,denominations,dp);
        return dp[n][v]=take+nottake;
        
        
    }

	public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here	
        int n=denominations.length;
        long dp[][]=new long[n+1][value+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=value;j++){
                dp[i][j]=-1;
                
            }
            
        }
        
return helper(n,value,denominations,dp);
	}
	
}

Tabulation


public class Solution {
	public static long countWaysToMakeChange(int denominations[], int value){
        //write your code here	
        int n=denominations.length;
        long dp[][]=new long[n+1][value+1];
        for(int i=0;i<=n;i++){
            dp[i][0]=1;
            
        }
        for(int j=1;j<=value;j++){
                dp[0][j]=0;
                
            }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=value;j++){
                if(denominations[i-1]>j)
                {
                    dp[i][j]=dp[i-1][j];
                }
                else{
                    long take=dp[i][j-denominations[i-1]];
                    long nottake=dp[i-1][j];
                    dp[i][j]=take+nottake;
                }
            }
        }
        
return dp[n][value];
	}
	
}