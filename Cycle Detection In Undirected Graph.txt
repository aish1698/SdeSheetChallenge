import java.util.*;

public class Solution {
private static boolean ifcyclepresent(ArrayList<ArrayList<Integer>> adj,boolean vis[],
                                      int par,int ver){
    vis[ver]=true;
    for(int e:adj.get(ver)){
        if(vis[e]==false)
        {
            if(ifcyclepresent(adj,vis,ver,e))
            {
                return true;
            }
        }
        else if(e!=par)
        {
            return true;
        }
        
    }
    return false;
}    
    
    public static String cycleDetection(int[][] edges, int n, int m) {
        // Write your code here.
   ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<=n;i++){
            adj.add(i,new ArrayList());
        }
        for(int i=0;i<edges.length;i++){
         adj.get(edges[i][0]).add(edges[i][1]);
         adj.get(edges[i][1]).add(edges[i][0]);
        }
        boolean vis[]=new boolean[n+1];
       
       
        for(int i=1;i<=n;i++){
         if(vis[i]==false)
         {
             if(ifcyclepresent(adj,vis,-1,i))
             {
                 return "Yes";
             }
         }
        }
        return "No";
    }
    
}