
import java.util.*;
import java.io.*;
public class Solution {
    private static int helper(int grid[][],int r,int c,int dp[][]){
         if(r==0&&c==0)
        {
            return grid[0][0];
        }
        
           if(r<0||c<0)
           return (int)Math.pow(10,9);
        
       if(dp[r][c]!=-1)
           return dp[r][c];
        
        int up=grid[r][c]+helper(grid,r-1,c,dp);
        int left=grid[r][c]+helper(grid,r,c-1,dp);
        return dp[r][c]=Math.min(up,left);    
    }
    
    public static int minSumPath(int[][] grid) {
    	// Write your code here.
        int m=grid.length;
        int n=grid[0].length;
        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               dp[i][j]=-1;
               
           }
            
        }
       return helper(grid,m-1,n-1,dp);
    }
}

Tabulation
import java.util.*;
import java.io.*;
public class Solution {

    
    public static int minSumPath(int[][] grid) {
    	// Write your code here.
        int m=grid.length;
        int n=grid[0].length;
        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               if(i==0&&j==0)
                   dp[i][j]=grid[i][j];
               else {
                   int up=grid[i][j];
                   if(i>0)
                       up+=dp[i-1][j];
                   else
                       up+=(int)Math.pow(10,9);
                   
                    int left=grid[i][j];
                   if(j>0)
                       left+=dp[i][j-1];
                   else 
                       left+=(int)Math.pow(10,9);
                   
                   dp[i][j]=Math.min(up,left);
               }
               
           }
            
        }
       return dp[m-1][n-1];
    }
}
