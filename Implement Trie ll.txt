import java.util.*;
class Node{
    Node links[]=new Node[26];
    int ew=0;
    int cp=0;
    Node(){}
    void put(char ch,Node node){
        links[ch-'a']=node;
        
    }
    boolean containsKey(char ch){
        return(links[ch-'a']!=null);
    }
    
    Node get(char ch){
        return links[ch-'a'];
    }
    void increaseend(){
        ew++;
    }
    void increaseprefix(){
        cp++;
    }
    void deleteend(){
        ew--;
    }
    void reduceprefix(){
        cp--;
    }
    int getend(){
        return ew;
    }
    int getprefix(){
        return cp;
    }
    
    
}
public class Trie {
    Node root;
    public Trie() {
        // Write your code here.
        root=new Node();
    }

    public void insert(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i)))
            {
                node.put(word.charAt(i),new Node());
            }
            node=node.get(word.charAt(i));
            node.increaseprefix();
        }
        node.increaseend();
        
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(!node.containsKey(word.charAt(i)))
            {
                return 0;
            }
            else{
                node=node.get(word.charAt(i));
            }
        }
        return node.getend();
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i)))
            {
                node=node.get(word.charAt(i));
                
            }
            else{
                return 0;
            }
        }
        return node.getprefix();
    }

    public void erase(String word) {
        // Write your code here.
        Node node=root;
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i)))
            {
                node=node.get(word.charAt(i));
                node.reduceprefix();
            }
            else{
                return;
            }
        }
        node.deleteend();
    }

}
