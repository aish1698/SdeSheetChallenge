/*
	Following is the class used to represent the object/node of the Binary Tree

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}
*/
import java.util.*;

public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		// Write your code here!
         
        if(root==null)
            return new ArrayList();
       ArrayList<Integer> ds=new ArrayList<>();     
    Queue<BinaryTreeNode<Integer>> q=new LinkedList<>();
        q.offer(root);
        boolean flag=true;
        while(!q.isEmpty()){
            int size=q.size();
            ArrayList<BinaryTreeNode<Integer>> arr=new ArrayList<>();
            for(int i=0;i<size;i++){
                BinaryTreeNode<Integer> temp=q.poll();
                if(temp.left!=null)
                    q.offer(temp.left);
                if(temp.right!=null)
                    q.offer(temp.right);
                if(flag==true)
                    arr.add(temp);
                else
                    arr.add(0,temp);
                
            }
            for(int i=0;i<arr.size();i++){
                ds.add(arr.get(i).data);
                
            }
            flag=!flag;
            
        }
        return ds;
	}
}
